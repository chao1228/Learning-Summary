智能指针类重载了解除引用运算符(*)和成员选择运算符(->),让程序员可以像使用常规指针那样使用它们

使智能指针真正“智能”的是复制构造函数、赋值运算符和析构函数的实现,它们决定
了智能指针对象被传递给函数、赋值或离开作用域(即像其他类对象一样被销毁)时的行为。

智能指针的分类实际上就是内存资源管理策略的分类,可分为如下几类:
• 深复制;
• 写时复制(Copy on Write,COW);
• 引用计数;
• 引用链接;
• 破坏性复制。

深复制
	实现了一个复制构造函数,使得能够通过函数 Clone( )函数对多态对象进行深复制—类必须实现函数 Clone( )。另外,它还实现了复制赋值运算符
	基于深复制的机制的不足之处在于性能(比如函数传递时)

写时复制机制(Copy on Write,COW)
	试图对深复制智能指针的性能进行优化,它共享指针,直
到首次写入对象。首次调用非 const 函数时,COW 指针通常为该非 const 函数操作的对象创建一个副本,而其他指针实例仍共享源对象。

引用计数智能指针
	这种智能指针被复制时,需要将对象的引用计数加 1。至少有两种常用的方法来跟踪计数:
	• 在对象中维护引用计数;
	• 引用计数由共享对象中的指针类维护

	引用计数还有一个独特的问题:如果两个对象分别存储指向对方的指针,这两个对象将永远不会被释放,因为它们的生命周期依赖性导致其引用计数最少为 1

引用链接智能指针
	引用链接智能指针不主动维护对象的引用计数,而只需知道计数什么时候变为零,以便能够释放对象。之所以称为引用链接,是因为其实现是基于双向链表的。通过复制智能指针来创建新智能指针时,新指针将被插入到链表中。当智能指针离开作用域进而被销毁时,析构函数将把它从链表中删除。

破坏性复制
	破坏性复制是这样一种机制,即在智能指针被复制时,将对象的所有权转交给目标指针并重置原来的指针。
	虽然破坏性复制机制使用起来并不直观,但它有一个优点,即可确保任何时刻只有一个活动指针指向对象。
	std::auto_ptr 是最流行(也可以说是最臭名昭著,取决于您如何看)的破坏性复制指针。被传递给函数或复制给另一个指针后,这种智能指针就没有用了。C++11 摒弃了std::auto_ptr,您应使用 std::unque_ptr,这种指针不能按值传递,而只能按引用传递,因为其复制构造函数和复制赋值运算符都是私有的。

std::unique_ptr
	unique_ptr<Fish> copySmartFish;
	// copySmartFish = smartFish; // error: operator= is private

	unique_ptr 不支持复制:
	copySmartFish = smartFish; // error: operator= isprivate
	然而,它确实支持移动语义,因此一种可行的选项如下:
	unique_ptr<Fish> sameFish (std::move(smartFish));
	// smartFish is empty henceforth


